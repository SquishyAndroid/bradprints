{"version":3,"sources":["config/particle.js","components/contact.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","AppToaster","Toaster","create","position","Position","TOP","ContactForm","state","name","email","message","sent","buttonIcon","handleFormSubmit","e","axios","post","headers","then","response","console","log","status","showToast","Intent","SUCCESS","setState","props","handleClose","catch","error","DANGER","preventDefault","handleFields","target","value","intent","show","timeout","buttonClass","this","length","title","onClose","className","Classes","DIALOG_BODY","style","fontSize","lineHeight","onSubmit","id","type","placeholder","large","fill","rounded","onChange","Component","App","isOpen","handleOpen","params","marginBottom","href","rel","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7b506c4.chunk.js","sourcesContent":["module.exports = {\n    \"particles\": {\n        \"number\": {\n            \"value\": 150,\n            \"density\": {\n                \"enable\": true,\n                \"value_area\": 2500\n            }\n        },\n        \"line_linked\": {\n            \"enable\": true,\n            \"opacity\": 0.04\n        },\n        \"move\": {\n            \"direction\": \"right\",\n            \"speed\": 0.05\n        },\n        \"size\": {\n            \"value\": 1\n        },\n        \"opacity\": {\n            \"anim\": {\n                \"enable\": true,\n                \"speed\": 1,\n                \"opacity_min\": 0.05\n            }\n        }\n    },\n    \"interactivity\": {\n        \"events\": {\n            \"onclick\": {\n                \"enable\": true,\n                \"mode\": \"push\"\n            }\n        },\n        \"modes\": {\n            \"push\": {\n                \"particles_nb\": 1\n            }\n        }\n    },\n    \"retina_detect\": true\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Dialog, Classes, InputGroup, TextArea, Toaster, Intent, Position } from \"@blueprintjs/core\";\n\nconst AppToaster = Toaster.create({\n    position: Position.TOP\n});\n\nexport default class ContactForm extends Component {\n    state = {\n        name: \"\",\n        email: \"\",\n        message: \"\",\n        sent: false,\n        buttonIcon: \"fas fa-paper-plane\"\n    }\n    \n    handleFormSubmit = (e) => {\n        if (this.state.name && this.state.email && this.state.message && !this.state.sent) {\n\t\t\taxios.post(\"https://tinymailer.herokuapp.com/api/mail\", {\n\t\t\t\tname: this.state.name,\n\t\t\t\temail: this.state.email,\n\t\t\t\tmessage: this.state.message,\n\t\t    },{\n\t\t    \theaders: {\"Accept\": \"application/json\"}\n\t\t    })\n\t\t    .then((response) => {\n\t\t    \tconsole.log(response);\n\t\t    \tif (response.status === 200) {\n\t\t    \t\tthis.showToast(\"Message sent!\", Intent.SUCCESS);\n\t\t    \t\tthis.setState({ buttonIcon: \"fas fa-check-circle\", sent: true });\n                    this.props.handleClose();\n\t\t    \t}\n\t\t    })\n\t\t    .catch((error) => {\n\t\t    \tconsole.log(error);\n\t\t    \tthis.showToast(\"There was an issue.\", Intent.DANGER);\n\t\t    });\n\t\t} else {\n\t\t\tthis.showToast(\"Please complete all the fields and try again.\", Intent.DANGER);\n\t\t}\n\t    e.preventDefault();\n    }\n    \n    handleFields = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n    \n    showToast = (message, intent) => {\n\t\tAppToaster.show({\n\t\t\tmessage: message,\n\t\t\tintent: intent,\n\t\t\ttimeout: 3000\n\t\t})\n\t}\n    \n    render() {\n        let buttonClass;\n\t\tif (this.state.name && this.state.email && this.state.message.length > 5) {\n\t\t\tbuttonClass = \"submit-button\";\n\t\t\tif (this.state.sent) {\n\t\t\t\tbuttonClass = \"submit-button sent disabled\";\n\t\t\t}\n\t\t} else {\n\t\t\tbuttonClass = \"submit-button disabled\";\n\t\t}\n        \n        return(\n            <Dialog\n                title=\"Contact Me\"\n                onClose={this.props.handleClose}\n                {...this.props}\n            >\n                <div className={Classes.DIALOG_BODY}>\n                    <p style={{fontSize: '18px', lineHeight: '1.5em'}}>Please feel free to reach out to me regarding any inquiries!</p>\n                    <form onSubmit={this.handleFormSubmit}>\n                        <InputGroup\n                            id=\"name\"\n                            name=\"name\"\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            large=\"true\"\n                            fill=\"true\"\n                            rounded=\"true\"\n                            onChange={this.handleFields}\n                        />\n                        \n                        <InputGroup\n    \t\t\t\t\t\tid=\"email\"\n    \t\t\t\t\t\tname=\"email\"\n    \t\t\t\t\t\ttype=\"email\"\n    \t\t\t\t\t\tplaceholder=\"Email Address\"\n    \t\t\t\t\t\tlarge=\"true\"\n    \t\t\t\t\t\tfill=\"true\"\n    \t\t\t\t\t\trounded=\"true\"\n    \t\t\t\t\t\tonChange={this.handleFields}\n    \t\t\t\t\t/>\n                        \n                        <TextArea\n    \t\t\t\t\t\tid=\"message\"\n    \t\t\t\t\t\tname=\"message\"\n    \t\t\t\t\t\tplaceholder=\"Write a message\"\n    \t\t\t\t\t\tfill=\"true\"\n    \t\t\t\t\t\tlarge=\"true\"\n    \t\t\t\t\t\trounded=\"true\"\n    \t\t\t\t\t\tonChange={this.handleFields}\n    \t\t\t\t\t/>\n                        \n                        <button\n    \t\t\t\t\t\tclassName={buttonClass}\n    \t\t\t\t\t\ttype=\"submit\"\n    \t\t\t\t\t>Submit<span> <i className={this.state.buttonIcon}></i></span></button>\n                        \n                    </form>\n                </div>\n            </Dialog>\n        )\n    }\n}","import React, { Component, Fragment } from 'react';\nimport Particles from 'react-particles-js';\nimport ContactForm from './contact';\nimport params from '../config/particle.js';\nimport '../scss/App.scss';\n\nexport default class App extends Component {\n    state = {\n        isOpen: false\n    }\n    \n    handleOpen = () => this.setState({ isOpen: true });\n    handleClose = () => this.setState({ isOpen: false });\n    \n    render() {\n        return (\n            <Fragment>\n                <ContactForm\n                    isOpen={this.state.isOpen}\n                    handleClose={this.handleClose}\n                />\n                \n                <div className=\"App\">\n                    <Particles params={params}/>\n                    <header className=\"App-header\">\n                        <h1>bradprints</h1>\n                        <div style={{marginBottom: '10px'}}>Contact me</div>\n                        <div className=\"links\">\n                            <a href=\"https://www.instagram.com/bradprints/\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-instagram\"></i></a>\n                            <i\n                                className=\"far fa-envelope\"\n                                onClick={this.handleOpen}\n                            ></i>\n                        </div>\n                    </header>\n                </div>\n            </Fragment>\n        )\n    }    \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}